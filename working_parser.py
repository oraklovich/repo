# working_parser.py
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import time
import re
from database import get_db_connection

def parse_results_for_date(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–µ–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    url = f"https://scores24.live/ru/soccer/{date_str}"
    print(f"üï∏Ô∏è  –ü–∞—Ä—Å–∏–º URL: {url}")
    
    try:
        response = requests.get(url, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return []
    
    soup = BeautifulSoup(response.text, 'html.parser')
    results = []
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è scores24.live
    # –ò—â–µ–º –≤—Å–µ –º–∞—Ç—á–∏ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –º–∞—Ç—á–∞–º–∏)
    match_containers = soup.find_all('div', class_='sm')
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –º–∞—Ç—á–µ–π: {len(match_containers)}")
    
    for container in match_containers:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            teams_elem = container.find('a', class_='teams')
            if teams_elem:
                teams_text = teams_elem.get_text(strip=True)
                # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–∏—Ä–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
                if ' - ' in teams_text:
                    home_team, away_team = teams_text.split(' - ', 1)
                else:
                    continue
            else:
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
            score_elem = container.find('div', class_='sc')
            score_text = score_elem.get_text(strip=True) if score_elem else '?-?'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
            status_elem = container.find('div', class_='st')
            status = status_elem.get_text(strip=True) if status_elem else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
            home_score = None
            away_score = None
            
            if score_text and ':' in score_text and score_text != '-:-':
                try:
                    home_score, away_score = map(int, score_text.split(':'))
                except ValueError:
                    pass
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
            time_elem = container.find('div', class_='dt')
            match_time_str = time_elem.get_text(strip=True) if time_elem else ''
            
            result = {
                'home_team': home_team.strip(),
                'away_team': away_team.strip(),
                'score': score_text,
                'home_score': home_score,
                'away_score': away_score,
                'status': status,
                'time': match_time_str,
                'date': date_str
            }
            
            results.append(result)
            print(f"   ‚öΩ {home_team} {score_text} {away_team} ({status})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Ç—á–∞: {e}")
            continue
    
    return results

def get_matches_without_results():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏–∑ predictions –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    query = """
        SELECT p.id, p.home_team, p.away_team, p.match_time
        FROM predictions p
        WHERE p.match_time < NOW()
        AND NOT EXISTS (
            SELECT 1 
            FROM results r 
            WHERE r.home_team = p.home_team 
            AND r.away_team = p.away_team 
            AND r.match_time = p.match_time
        )
        ORDER BY p.match_time DESC;
    """
    
    cur.execute(query)
    matches = cur.fetchall()
    cur.close()
    conn.close()
    return matches

def save_result_to_db(home_team, away_team, match_time, home_score, away_score, status):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            INSERT INTO results (home_team, away_team, match_time, home_score, away_score, status, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
            ON CONFLICT (home_team, away_team, match_time) 
            DO UPDATE SET 
                home_score = EXCLUDED.home_score,
                away_score = EXCLUDED.away_score,
                status = EXCLUDED.status,
                updated_at = NOW()
        """, (home_team, away_team, match_time, home_score, away_score, status))
        
        conn.commit()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {home_team} {home_score}:{away_score} {away_team}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        conn.rollback()
        return False
    
    finally:
        cur.close()
        conn.close()

def main():
    print("üïµÔ∏è  –ó–ê–ü–£–°–ö –†–ê–ë–û–ß–ï–ì–û –ü–ê–†–°–ï–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    # 1. –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö
    print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê –ê–ö–¢–£–ê–õ–¨–ù–´–• –î–ê–¢–ê–•:")
    
    # –ü–∞—Ä—Å–∏–º –≤—á–µ—Ä–∞—à–Ω–∏–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏
    dates_to_test = [
        (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
        datetime.now().strftime("%Y-%m-%d")
    ]
    
    all_parsed_results = []
    for date_str in dates_to_test:
        print(f"\nüìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: {date_str}")
        results = parse_results_for_date(date_str)
        all_parsed_results.extend(results)
        time.sleep(1)
    
    print(f"\nüìä –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(all_parsed_results)}")
    
    # 2. –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ –ë–î
    print("\n" + "=" * 60)
    print("üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–¢–ß–ï–ô –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    
    matches = get_matches_without_results()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(matches)}")
    
    if not matches:
        print("üîö –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return
    
    # 3. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    saved_count = 0
    for match in matches:
        match_id, home_team, away_team, match_time = match
        print(f"\nüîç –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: {home_team} vs {away_team}")
        
        # –ò—â–µ–º –≤ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        for result in all_parsed_results:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
            if (result['home_team'].lower() == home_team.lower() and 
                result['away_team'].lower() == away_team.lower()):
                
                if save_result_to_db(
                    home_team, away_team, match_time,
                    result['home_score'], result['away_score'],
                    result['status']
                ):
                    saved_count += 1
                break
        else:
            print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ")
    
    print(f"\nüéØ –ò–¢–û–ì: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("üîö –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == '__main__':
    main()
