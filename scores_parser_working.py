# scores_parser_working.py
import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime
from models import get_db_session, Prediction, init_db

def parse_btts_predictions():
    """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã '–û–±–µ –∑–∞–±—å—é—Ç' —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL"""
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        url = "https://scores24.live/ru/trends?trendsMarketSlug=btts"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Connection': 'keep-alive'
        }
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL: {url}")
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        print(f"‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º script —Ç–µ–≥ —Å URQL_DATA
        print("–ò—â–µ–º window.URQL_DATA...")
        script_tags = soup.find_all('script')
        
        target_script = None
        for i, script in enumerate(script_tags):
            if script.string and 'window.URQL_DATA' in script.string:
                target_script = script
                print(f"‚úì –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π script —Ç–µ–≥ —Å URQL_DATA")
                break
        
        if not target_script:
            print("‚úó –ù–µ –Ω–∞–π–¥–µ–Ω script —Ç–µ–≥ —Å window.URQL_DATA")
            return 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        print("–ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ...")
        script_content = target_script.string.strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON –¥–∞–Ω–Ω—ã—Ö
        start_marker = 'window.URQL_DATA=JSON.parse("'
        end_marker = '");'
        
        start_idx = script_content.find(start_marker)
        if start_idx == -1:
            print("‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä JSON")
            return 0
        
        start_idx += len(start_marker)
        end_idx = script_content.find(end_marker, start_idx)
        
        if end_idx == -1:
            print("‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—á–Ω—ã–π –º–∞—Ä–∫–µ—Ä JSON")
            return 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É
        json_str = script_content[start_idx:end_idx]
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        try:
            json_str = json_str.encode('utf-8').decode('unicode_escape')
        except:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å unicode escape, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
        
        # –ü–∞—Ä—Å–∏–º JSON
        urql_data = json.loads(json_str)
        print("‚úì JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        
        # –ò—â–µ–º –º–∞—Ç—á–∏ –≤ –∫–ª—é—á–µ -2139603846 -> TopPredictionMatches
        matches_data = []
        
        for key, value in urql_data.items():
            if isinstance(value, dict) and 'data' in value:
                try:
                    data_value = json.loads(value['data']) if isinstance(value['data'], str) else value['data']
                    if isinstance(data_value, dict) and 'TopPredictionMatches' in data_value:
                        matches_data = data_value['TopPredictionMatches']
                        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –≤ TopPredictionMatches: {len(matches_data)}")
                        break
                except:
                    continue
        
        if not matches_data:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ç—á–∏ –≤ TopPredictionMatches")
            return 0
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        session = get_db_session()
        new_count = 0
        
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(matches_data)} –º–∞—Ç—á–µ–π...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        for i, match in enumerate(matches_data):
            try:
                print(f"\n--- –ú–∞—Ç—á {i+1} ---")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
                teams = match.get('teams', [])
                if len(teams) >= 2:
                    home_team = teams[0].get('name', 'Unknown Home')
                    away_team = teams[1].get('name', 'Unknown Away')
                else:
                    home_team = 'Unknown Home'
                    away_team = 'Unknown Away'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                match_time = None
                if 'matchDate' in match:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "2024-01-20T18:00:00Z"
                    match_date_str = match['matchDate']
                    match_time = datetime.fromisoformat(match_date_str.replace('Z', '+00:00'))
                else:
                    match_time = datetime.now()
                
                # –î–ª—è BTTS –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "Yes"
                prediction_value = "Yes"
                
                print(f"–ö–æ–º–∞–Ω–¥—ã: {home_team} vs {away_team}")
                print(f"–í—Ä–µ–º—è: {match_time}")
                print(f"–ü—Ä–æ–≥–Ω–æ–∑: {prediction_value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–∞—Ç—á –≤ –ë–î
                existing = session.query(Prediction).filter_by(
                    home_team=home_team,
                    away_team=away_team, 
                    match_time=match_time
                ).first()
                
                if not existing:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_prediction = Prediction(
                        home_team=home_team,
                        away_team=away_team,
                        match_time=match_time,
                        prediction_value=prediction_value,
                        source="scores24.live"
                    )
                    session.add(new_prediction)
                    new_count += 1
                    print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {home_team} vs {away_team}")
                else:
                    print(f"‚úì –£–∂–µ –≤ –ë–î: {home_team} vs {away_team}")
                    
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.commit()
        session.close()
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return new_count
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()
        return 0

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    parse_btts_predictions()
