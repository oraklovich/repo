# results_parser.py
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from database import get_db_connection
import time
import re

def get_matches_without_results():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏–∑ predictions –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    query = """
        SELECT p.id, p.home_team, p.away_team, p.match_time
        FROM predictions p
        WHERE p.match_time < NOW()
        AND NOT EXISTS (
            SELECT 1 
            FROM results r 
            WHERE r.home_team = p.home_team 
            AND r.away_team = p.away_team 
            AND r.match_time = p.match_time
        )
        ORDER BY p.match_time DESC;
    """
    
    cur.execute(query)
    matches = cur.fetchall()
    cur.close()
    conn.close()
    return matches

def save_result_to_db(home_team, away_team, match_time, home_score, away_score, status):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            INSERT INTO results (home_team, away_team, match_time, home_score, away_score, status, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
        """, (home_team, away_team, match_time, home_score, away_score, status))
        
        conn.commit()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {home_team} {home_score}:{away_score} {away_team}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        conn.rollback()
    
    finally:
        cur.close()
        conn.close()

def parse_results_for_date(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–µ–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    url = f"https://scores24.live/ru/soccer/{date_str}"
    print(f"üï∏Ô∏è  –ü–∞—Ä—Å–∏–º URL: {url}")
    
    try:
        response = requests.get(url, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return []
    
    soup = BeautifulSoup(response.text, 'html.parser')
    results = []
    
    # –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –º–∞—Ç—á–∞–º–∏
    match_containers = soup.find_all('div', class_='sm')
    
    for container in match_containers:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            teams_elem = container.find('div', class_='teams')
            if not teams_elem:
                continue
                
            teams_text = teams_elem.get_text(strip=True)
            teams = teams_text.split(' - ')
            if len(teams) != 2:
                continue
                
            home_team = teams[0].strip()
            away_team = teams[1].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
            score_elem = container.find('div', class_='sc')
            score_text = score_elem.get_text(strip=True) if score_elem else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
            status_elem = container.find('div', class_='st')
            status = status_elem.get_text(strip=True) if status_elem else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
            home_score = None
            away_score = None
            
            if score_text and ':' in score_text and score_text != '-:-':
                try:
                    home_score, away_score = map(int, score_text.split(':'))
                except ValueError:
                    pass
            
            results.append({
                'home_team': home_team,
                'away_team': away_team,
                'score': score_text,
                'home_score': home_score,
                'away_score': away_score,
                'status': status
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            continue
    
    return results

def find_and_save_results(matches, all_parsed_results):
    """–ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–∞—Ç—á–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î."""
    saved_count = 0
    
    for match in matches:
        match_id, home_team, away_team, match_time = match
        date_str = match_time.strftime("%Y-%m-%d")
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        for result in all_parsed_results:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
            if (result['home_team'] == home_team and result['away_team'] == away_team):
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
                save_result_to_db(
                    home_team, 
                    away_team, 
                    match_time,
                    result['home_score'],
                    result['away_score'],
                    result['status']
                )
                saved_count += 1
                break
        
        # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
        for result in all_parsed_results:
            if (home_team in result['home_team'] and away_team in result['away_team']):
                save_result_to_db(
                    home_team, 
                    away_team, 
                    match_time,
                    result['home_score'],
                    result['away_score'],
                    result['status']
                )
                saved_count += 1
                break
    
    return saved_count

def main():
    print("üïµÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    matches = get_matches_without_results()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(matches)}")
    
    if not matches:
        print("üîö –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return
    
    # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –¥–∞—Ç–∞–º
    dates_to_parse = set()
    for match in matches:
        match_time = match[3]
        date_str = match_time.strftime("%Y-%m-%d")
        dates_to_parse.add(date_str)
    
    print(f"üìÖ –ë—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—ã: {', '.join(dates_to_parse)}")
    
    # 3. –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    all_parsed_results = []
    for date_str in dates_to_parse:
        results = parse_results_for_date(date_str)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {date_str}: {len(results)}")
        all_parsed_results.extend(results)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # 4. –ò—â–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    saved_count = find_and_save_results(matches, all_parsed_results)
    
    print(f"\nüéØ –ò—Ç–æ–≥: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("üîö –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == '__main__':
    main()
