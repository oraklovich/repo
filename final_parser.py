# final_parser.py
import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime
from models import get_db_session, Prediction, init_db
import time

def safe_db_operation(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    def wrapper(*args, **kwargs):
        max_retries = 3
        for attempt in range(max_retries):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(2)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    raise e
    return wrapper

@safe_db_operation
def save_prediction(session, home_team, away_team, match_time, prediction_value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –ë–î"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–∞—Ç—á –≤ –ë–î
    existing = session.query(Prediction).filter_by(
        home_team=home_team,
        away_team=away_team, 
        match_time=match_time
    ).first()
    
    if not existing:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_prediction = Prediction(
            home_team=home_team,
            away_team=away_team,
            match_time=match_time,
            prediction_value=prediction_value,
            source="scores24.live"
        )
        session.add(new_prediction)
        session.commit()
        return True
    return False

def parse_btts_predictions():
    """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã '–û–±–µ –∑–∞–±—å—é—Ç'"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    
    try:
        url = "https://scores24.live/ru/trends?trendsMarketSlug=btts"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        print(f"üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å: {url}")
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º script —Ç–µ–≥ —Å URQL_DATA
        script_tags = soup.find_all('script')
        
        target_script = None
        for script in script_tags:
            if script.string and 'window.URQL_DATA' in script.string:
                target_script = script
                break
        
        if not target_script:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω script —Ç–µ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏")
            return 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        script_content = target_script.string.strip()
        start_marker = 'window.URQL_DATA=JSON.parse("'
        end_marker = '");'
        
        start_idx = script_content.find(start_marker)
        end_idx = script_content.find(end_marker, start_idx)
        
        if start_idx == -1 or end_idx == -1:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –¥–∞–Ω–Ω—ã–µ")
            return 0
        
        json_str = script_content[start_idx + len(start_marker):end_idx]
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        try:
            json_str = json_str.encode('utf-8').decode('unicode_escape')
        except:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å unicode escape")
        
        # –ü–∞—Ä—Å–∏–º JSON
        urql_data = json.loads(json_str)
        
        # –ò—â–µ–º –º–∞—Ç—á–∏ –≤ TopPredictionMatches
        matches_data = []
        for key, value in urql_data.items():
            if isinstance(value, dict) and 'data' in value:
                try:
                    data_value = json.loads(value['data']) if isinstance(value['data'], str) else value['data']
                    if isinstance(data_value, dict) and 'TopPredictionMatches' in data_value:
                        matches_data = data_value['TopPredictionMatches']
                        break
                except:
                    continue
        
        if not matches_data:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return 0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches_data)}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        session = get_db_session()
        new_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        for i, match in enumerate(matches_data):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
                teams = match.get('teams', [])
                if len(teams) >= 2:
                    home_team = teams[0].get('name', 'Unknown Home').strip()
                    away_team = teams[1].get('name', 'Unknown Away').strip()
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                if 'matchDate' in match:
                    match_time = datetime.fromisoformat(match['matchDate'].replace('Z', '+00:00'))
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                if save_prediction(session, home_team, away_team, match_time, "Yes"):
                    print(f"‚úÖ [{i+1}/{len(matches_data)}] –î–æ–±–∞–≤–ª–µ–Ω: {home_team} vs {away_team}")
                    new_count += 1
                else:
                    print(f"‚ö† [{i+1}/{len(matches_data)}] –£–∂–µ –≤ –ë–î: {home_team} vs {away_team}")
                    
            except Exception as e:
                print(f"‚ùå [{i+1}/{len(matches_data)}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                continue
        
        session.close()
        print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return new_count
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 0

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    parse_btts_predictions()
