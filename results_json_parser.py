# results_json_parser.py
import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime, timedelta
from database import get_db_connection

def parse_results_from_json(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è JSON –∏–∑ script —Ç–µ–≥–æ–≤
    (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)
    """
    url = f"https://scores24.live/ru/soccer/{date_str}"
    print(f"üï∏Ô∏è  –ü–∞—Ä—Å–∏–º URL: {url}")
    
    try:
        response = requests.get(url, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return []
    
    soup = BeautifulSoup(response.text, 'html.parser')
    results = []
    
    # –ò—â–µ–º script —Ç–µ–≥–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)
    script_tags = soup.find_all('script')
    
    for script in script_tags:
        if 'window.URQL_DATA' in script.text:
            print("‚úÖ –ù–∞—à–ª–∏ window.URQL_DATA –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            json_data = re.search(r'window\.URQL_DATA\s*=\s*({.*?});', script.text, re.DOTALL)
            
            if json_data:
                try:
                    data = json.loads(json_data.group(1))
                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ URQL_DATA")
                    
                    # –ò—â–µ–º –º–∞—Ç—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    for key, value in data.items():
                        if 'match' in key.lower() or 'event' in key.lower():
                            try:
                                match_data = value.get('data', {})
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                if (match_data.get('homeScore') is not None and 
                                    match_data.get('awayScore') is not None):
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                                    home_team = match_data.get('homeTeam', {}).get('name', '')
                                    away_team = match_data.get('awayTeam', {}).get('name', '')
                                    home_score = match_data.get('homeScore')
                                    away_score = match_data.get('awayScore')
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
                                    status_type = match_data.get('status', {}).get('type', '')
                                    status_name = match_data.get('status', {}).get('name', '')
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                                    start_date = match_data.get('startDate', '')
                                    if start_date:
                                        try:
                                            match_time = datetime.fromisoformat(start_date.replace('Z', '+00:00'))
                                        except:
                                            match_time = None
                                    else:
                                        match_time = None
                                    
                                    result = {
                                        'home_team': home_team,
                                        'away_team': away_team,
                                        'home_score': home_score,
                                        'away_score': away_score,
                                        'status': status_name or status_type,
                                        'match_time': match_time,
                                        'league': match_data.get('tournament', {}).get('name', ''),
                                        'source': 'json'
                                    }
                                    
                                    results.append(result)
                                    print(f"   ‚öΩ {home_team} {home_score}:{away_score} {away_team} ({status_name})")
                                    
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                                continue
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    continue
                except Exception as e:
                    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
                    continue
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {len(results)}")
    return results

def get_matches_without_results():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏–∑ predictions –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    query = """
        SELECT p.id, p.home_team, p.away_team, p.match_time
        FROM predictions p
        WHERE NOT EXISTS (
            SELECT 1 
            FROM results r 
            WHERE r.home_team = p.home_team 
            AND r.away_team = p.away_team 
            AND r.match_time = p.match_time
        )
        ORDER BY p.match_time DESC;
    """
    
    cur.execute(query)
    matches = cur.fetchall()
    cur.close()
    conn.close()
    return matches

def save_result_to_db(home_team, away_team, match_time, home_score, away_score, status):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            INSERT INTO results (home_team, away_team, match_time, home_score, away_score, status, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
            ON CONFLICT (home_team, away_team, match_time) 
            DO UPDATE SET 
                home_score = EXCLUDED.home_score,
                away_score = EXCLUDED.away_score,
                status = EXCLUDED.status,
                updated_at = NOW()
        """, (home_team, away_team, match_time, home_score, away_score, status))
        
        conn.commit()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {home_team} {home_score}:{away_score} {away_team}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        conn.rollback()
        return False
    
    finally:
        cur.close()
        conn.close()

def main():
    print("üß† –ü–ê–†–°–ï–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (JSON –ª–æ–≥–∏–∫–∞)")
    print("=" * 60)
    
    # 1. –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
    dates_to_parse = [
        (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
        (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d"),
        (datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d")
    ]
    
    all_results = []
    for date_str in dates_to_parse:
        print(f"\nüìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: {date_str}")
        results = parse_results_from_json(date_str)
        all_results.extend(results)
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ –ë–î –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    matches = get_matches_without_results()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(matches)}")
    
    if not matches:
        print("üîö –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüîç –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ç—á–∏...")
    saved_count = 0
    
    for match in matches:
        match_id, home_team, away_team, match_time = match
        print(f"\nüîç –ò—â–µ–º: {home_team} vs {away_team}")
        
        found = False
        for result in all_results:
            # –ò—â–µ–º –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
            if (result['home_team'].lower() == home_team.lower() and 
                result['away_team'].lower() == away_team.lower()):
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['home_score']}:{result['away_score']}")
                
                if save_result_to_db(
                    home_team, away_team, match_time,
                    result['home_score'], result['away_score'],
                    result['status']
                ):
                    saved_count += 1
                    found = True
                break
        
        if not found:
            print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\nüéØ –ò–¢–û–ì: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("üîö –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == '__main__':
    main()
