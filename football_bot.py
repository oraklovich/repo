#!/usr/bin/env python3

import os
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLAlchemy
from models import get_db_session, Prediction, init_db

TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
SCORES_API_URL = os.environ.get('SCORES_API_URL', 'http://scores-parser-service:5001')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '‚öΩ –§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/btts - –ú–∞—Ç—á–∏ "–û–±–µ –∑–∞–±—å—é—Ç"\n'
        '/help - –ü–æ–º–æ—â—å'
    )


def save_prediction_to_db(home_team, away_team, match_time, prediction_value="Yes", source="telegram_bot"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    """
    session = get_db_session()
    existing = session.query(Prediction).filter_by(
        home_team=home_team,
        away_team=away_team,
        match_time=match_time
    ).first()

    if not existing:
        pred = Prediction(
            home_team=home_team,
            away_team=away_team,
            match_time=match_time,
            prediction_value=prediction_value,
            source=source
        )
        session.add(pred)
        session.commit()
        print(f"‚úÖ –í –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑: {home_team} vs {away_team} ({match_time})")
    else:
        print(f"‚ö† –ü—Ä–æ–≥–Ω–æ–∑ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î: {home_team} vs {away_team} ({match_time})")

    session.close()


async def btts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{SCORES_API_URL}/matches/btts", timeout=15)
        data = response.json()
        
        if not data['matches']:
            await update.message.reply_text('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö')
            return
            
        message = "‚öΩ *–ú–∞—Ç—á–∏ \"–û–±–µ –∑–∞–±—å—é—Ç\":*\n\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –ë–î
        for match in data['matches']:
            message += f"‚Ä¢ {match['teams']}\n"
            message += f"  üïê {match['time']} | üìä {match['probability']}\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "Home - Away")
            if " - " in match['teams']:
                home_team, away_team = match['teams'].split(" - ", 1)
            else:
                continue  # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
            try:
                match_time = datetime.fromisoformat(match['time'])
            except Exception:
                match_time = datetime.utcnow()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ predictions
            save_prediction_to_db(home_team.strip(), away_team.strip(), match_time)

        message += f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['matches'][0]['timestamp']}_"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '/btts - –ü—Ä–æ–≥–Ω–æ–∑ "–û–±–µ –∑–∞–±—å—é—Ç"\n'
        '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞'
    )


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("btts", btts_command))
    app.add_handler(CommandHandler("help", help_command))
    
    print("Football bot starting...")
    app.run_polling()


if __name__ == '__main__':
    main()
