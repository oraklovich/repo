#!/usr/bin/env python3

import requests
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±—É–¥–µ–º –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
CHECKER_SERVICE_URL = os.environ.get('CHECKER_SERVICE_URL', 'http://website-checker-service/check')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /check —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å.')

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ù–ê–®–ï–ú–£ –°–ï–†–í–ò–°–£ –≤ Kubernetes
        response = requests.get(f"{CHECKER_SERVICE_URL}", timeout=10)
        data = response.json()
        
        message = "üìä *–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:*\n"
        for site in data['results']:
            status_icon = "üü¢" if site['status'] == 'UP' else "üî¥"
            message += f"{status_icon} {site['url']} - {site['status']} (–∫–æ–¥: {site.get('status_code', 'N/A')})\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–æ–≤: {e}')

def main():
    if not TELEGRAM_TOKEN:
        print("ERROR: TELEGRAM_TOKEN environment variable is not set!")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("check", check_command))
    
    print("Bot is starting...")
    app.run_polling()

if __name__ == '__main__':
    main()
