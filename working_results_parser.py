# working_results_parser.py
import requests
from bs4 import BeautifulSoup
from database import get_db_connection

FINISHED_KEYWORDS = ("–∑–∞–∫–æ–Ω—á–µ–Ω", "–∑–∞–≤–µ—Ä—à")

def parse_results(date: str = "yesterday"):
    """
    –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –ø–æ –¥–∞—Ç–µ (–∏–ª–∏ –≤—á–µ—Ä–∞—à–Ω–∏–µ).
    date: "yesterday" –∏–ª–∏ "YYYY-MM-DD"
    –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: –ø–µ—Ä–≤—ã–π div.sc-pvs6fr-0 –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ div.sc-4g7sie-0.
    """
    url = f"https://scores24.live/ru/soccer/{date}"
    print(f"üï∏Ô∏è  –ü–∞—Ä—Å–∏–º URL: {url}")

    try:
        response = requests.get(
            url,
            headers={
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/120.0.0.0 Safari/537.36"
                )
            },
            timeout=20,
        )
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    matches = []

    # –ö–∞–∂–¥—ã–π –º–∞—Ç—á ‚Äî –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫
    for match in soup.select("div.sc-17qxh4e-0"):
        try:
            # 1) –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team_nodes = match.select("div.sc-17qxh4e-10")
            if len(team_nodes) < 2:
                continue
            home_team = team_nodes[0].get_text(strip=True)
            away_team = team_nodes[1].get_text(strip=True)

            # 2) –°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
            status_elem = match.select_one("div.sc-1p31vt4-0")
            status = status_elem.get_text(strip=True) if status_elem else ""
            if status and not any(k in status.lower() for k in FINISHED_KEYWORDS):
                # –ï—Å–ª–∏ –º–∞—Ç—á –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
            if not status:
                status = "–ó–∞–≤–µ—Ä—à–µ–Ω"

            # 3) –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å—á–µ—Ç–∞–º–∏ –∏ –í–ó–Ø–¢–¨ –ü–ï–†–í–´–ô –±–ª–æ–∫ –∫–∞–∫ –∏—Ç–æ–≥
            scores_container = match.select_one("div.sc-4g7sie-0")
            if not scores_container:
                continue

            final_score_block = scores_container.select_one("div.sc-pvs6fr-0")
            if not final_score_block:
                continue

            # –í–Ω—É—Ç—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–≤–∞ —á–∏—Å–ª–∞: —Ö–æ–∑—è–µ–≤–∞ –∏ –≥–æ—Å—Ç–∏
            score_cells = final_score_block.select("div.sc-pvs6fr-1")
            if len(score_cells) < 2:
                continue

            try:
                home_goals = int(score_cells[0].get_text(strip=True))
                away_goals = int(score_cells[1].get_text(strip=True))
            except ValueError:
                continue

            match_data = {
                "home_team": home_team,
                "away_team": away_team,
                "home_score": home_goals,
                "away_score": away_goals,
                "score": f"{home_goals}:{away_goals}",
                "status": status,
                "both_to_score": home_goals > 0 and away_goals > 0,
            }
            matches.append(match_data)
            print(f"   ‚öΩ {home_team} {home_goals}:{away_goals} {away_team} ({status})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Ç—á–∞: {e}")
            continue

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(matches)}")
    return matches


def get_matches_without_results():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏–∑ predictions –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results."""
    conn = get_db_connection()
    cur = conn.cursor()

    query = """
        SELECT p.id, p.home_team, p.away_team, p.match_time
        FROM predictions p
        WHERE NOT EXISTS (
            SELECT 1
            FROM results r
            WHERE r.home_team = p.home_team
              AND r.away_team = p.away_team
              AND r.match_time = p.match_time
        )
        ORDER BY p.match_time DESC;
    """

    cur.execute(query)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows


def upsert_result_to_db(home_team, away_team, match_time, home_score, away_score, status):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å (–ø–æ home+away+match_time),
    –∏–Ω–∞—á–µ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'inserted' | 'updated' | 'skipped'.
    """
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        cur.execute(
            """
            UPDATE results
               SET home_score = %s,
                   away_score = %s,
                   status = %s,
                   updated_at = NOW()
             WHERE home_team = %s
               AND away_team = %s
               AND match_time = %s
            """,
            (home_score, away_score, status, home_team, away_team, match_time),
        )
        if cur.rowcount > 0:
            conn.commit()
            print(f"‚ôªÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {home_team} {home_score}:{away_score} {away_team}")
            return "updated"

        # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        cur.execute(
            """
            INSERT INTO results (home_team, away_team, match_time, home_score, away_score, status, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
            """,
            (home_team, away_team, match_time, home_score, away_score, status),
        )
        conn.commit()
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {home_team} {home_score}:{away_score} {away_team}")
        return "inserted"

    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return "skipped"
    finally:
        cur.close()
        conn.close()


def main():
    print("üéØ –†–ê–ë–û–ß–ò–ô –ü–ê–†–°–ï–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç)")
    print("=" * 60)

    # –î–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏
    dates_to_parse = ["2025-08-23", "2025-08-22", "yesterday"]

    all_results = []
    for date in dates_to_parse:
        print(f"\nüìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: {date}")
        results = parse_results(date)
        all_results.extend(results)

    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")

    # –ú–∞—Ç—á–∏ –∏–∑ –ë–î, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    matches = get_matches_without_results()
    print(f"üóÑÔ∏è  –í –ë–î –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(matches)}")

    # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    if matches:
        print("\nüìã –ú–∞—Ç—á–∏ –∏–∑ predictions:")
        for i, m in enumerate(matches, 1):
            print(f"   {i:2d}. {m[1]} vs {m[2]}  @ {m[3]}")

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º
    saved_inserted = saved_updated = 0

    def norm(s: str) -> str:
        return s.lower().replace("—ë", "–µ").strip()

    for pid, p_home, p_away, p_time in matches:
        print(f"\nüîç –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {p_home} vs {p_away} @ {p_time}")
        found = False

        for r in all_results:
            # –ì–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ø–æ–¥—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            if (norm(r["home_team"]) in norm(p_home) or norm(p_home) in norm(r["home_team"])) \
               and (norm(r["away_team"]) in norm(p_away) or norm(p_away) in norm(r["away_team"])):

                found = True
                action = upsert_result_to_db(
                    p_home, p_away, p_time, r["home_score"], r["away_score"], r["status"]
                )
                if action == "inserted":
                    saved_inserted += 1
                elif action == "updated":
                    saved_updated += 1
                break

        if not found:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    print(f"\nüéØ –ò–¢–û–ì: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {saved_inserted}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {saved_updated}")

if __name__ == "__main__":
    main()
