# results_parser_orm.py
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import re
from models import get_db_session, Prediction, Result, Analysis

FINISHED_KEYWORDS = ("–∑–∞–∫–æ–Ω—á–µ–Ω", "–∑–∞–≤–µ—Ä—à", "finished", "completed")


def parse_results(date: str = "yesterday"):
    """–ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç"""
    if date == "yesterday":
        date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")

    url = f"https://scores24.live/ru/soccer/{date}"
    print(f"üï∏Ô∏è –ü–∞—Ä—Å–∏–º URL: {url}")

    try:
        response = requests.get(
            url,
            headers={
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/120.0.0.0 Safari/537.36"
                )
            },
            timeout=20,
        )
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    matches = []

    for match in soup.select("div.sc-17qxh4e-0"):
        try:
            team_nodes = match.select("div.sc-17qxh4e-10")
            if len(team_nodes) < 2:
                continue
            home_team = team_nodes[0].get_text(strip=True)
            away_team = team_nodes[1].get_text(strip=True)

            status_elem = match.select_one("div.sc-1p31vt4-0")
            status = status_elem.get_text(strip=True) if status_elem else "–ó–∞–≤–µ—Ä—à–µ–Ω"

            if not any(k in status.lower() for k in FINISHED_KEYWORDS):
                continue

            scores_container = match.select_one("div.sc-4g7sie-0")
            if not scores_container:
                continue
            final_score_block = scores_container.select_one("div.sc-pvs6fr-0")
            if not final_score_block:
                continue
            score_cells = final_score_block.select("div.sc-pvs6fr-1")
            if len(score_cells) < 2:
                continue

            try:
                home_goals = int(score_cells[0].get_text(strip=True))
                away_goals = int(score_cells[1].get_text(strip=True))
            except ValueError:
                continue

            matches.append({
                "home_team": home_team,
                "away_team": away_team,
                "home_score": home_goals,
                "away_score": away_goals,
                "status": status,
            })
            print(f"‚öΩ {home_team} {home_goals}:{away_goals} {away_team} ({status})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–∞: {e}")
            continue

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(matches)}")
    return matches


def normalize_name(name: str) -> str:
    return re.sub(r"[^\w]", "", name.lower().replace("—ë", "–µ").strip())


def find_matching_result(prediction: Prediction, results: list):
    """–ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    pred_home_norm = normalize_name(prediction.home_team)
    pred_away_norm = normalize_name(prediction.away_team)

    for result in results:
        res_home_norm = normalize_name(result["home_team"])
        res_away_norm = normalize_name(result["away_team"])
        if (pred_home_norm in res_home_norm or res_home_norm in pred_home_norm) and \
           (pred_away_norm in res_away_norm or res_away_norm in pred_away_norm):
            return result
    return None


def analyze_prediction_accuracy(prediction: Prediction, result: dict, session):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ BTTS —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑"""
    predicted_btts = prediction.prediction_value.lower() in ["yes", "–¥–∞", "true"]
    actual_btts = result["home_score"] > 0 and result["away_score"] > 0
    is_correct = predicted_btts == actual_btts

    analysis = Analysis(
        prediction_id=prediction.id,
        is_correct=is_correct
    )
    session.add(analysis)
    return is_correct


def main():
    print("üéØ PARSER & ANALYSIS BTTS")
    print("=" * 50)

    session = get_db_session()

    # –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    all_results = []
    for i in range(3):
        date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
        print(f"\nüìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: {date}")
        results = parse_results(date)
        all_results.extend(results)

    # –ë–µ—Ä–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results
    predictions_without_results = session.query(Prediction).filter(
        ~session.query(Result).filter(
            Result.home_team == Prediction.home_team,
            Result.away_team == Prediction.away_team,
            Result.match_time == Prediction.match_time
        ).exists()
    ).all()

    print(f"\nüóÑÔ∏è –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(predictions_without_results)}")

    inserted = updated = analyzed = 0

    for pred in predictions_without_results:
        print(f"\nüîç –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: {pred.home_team} vs {pred.away_team} @ {pred.match_time}")
        match_result = find_matching_result(pred, all_results)
        if match_result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            existing = session.query(Result).filter_by(
                home_team=pred.home_team,
                away_team=pred.away_team,
                match_time=pred.match_time
            ).first()
            if existing:
                existing.home_score = match_result["home_score"]
                existing.away_score = match_result["away_score"]
                existing.status = match_result["status"]
                updated += 1
                print(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: {pred.home_team} {match_result['home_score']}:{match_result['away_score']} {pred.away_team}")
            else:
                new_result = Result(
                    home_team=pred.home_team,
                    away_team=pred.away_team,
                    match_time=pred.match_time,
                    home_score=match_result["home_score"],
                    away_score=match_result["away_score"],
                    status=match_result["status"]
                )
                session.add(new_result)
                inserted += 1
                print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {pred.home_team} {match_result['home_score']}:{match_result['away_score']} {pred.away_team}")

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
            if analyze_prediction_accuracy(pred, match_result, session):
                print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ä–Ω—ã–π")
            else:
                print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–≤–µ—Ä–Ω—ã–π")
            analyzed += 1
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ")

    session.commit()
    session.close()

    print("\nüéØ –ò–¢–û–ì:")
    print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {inserted}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {updated}")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {analyzed}")


if __name__ == "__main__":
    main()
